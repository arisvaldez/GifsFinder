{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","val","value","placeholder","onChange","target","type","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","console","log","className","alt","src","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oMA8BeA,EA3BY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,MAKhB,SACE,uBACEO,MAAOR,EACPS,YAAY,4BACZC,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOH,QAiBnBI,KAAK,Y,8BCxBPC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UACpDH,GAFY,+DAISI,MAAMF,GAJf,cAIRG,EAJQ,gBAKSA,EAASC,OALlB,uBAKNC,EALM,EAKNA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAaPM,GAbO,4CAAH,sDAgBET,ICdFgB,EAAe,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAExC,OADAc,QAAQC,MAEN,sBAAKC,UAAU,2CAAf,UACE,qBAAKC,IAAKP,EAAOQ,IAAKlB,IACtB,kCAAKU,SCFES,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACxB,ECH0B,SAACA,GAC3B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAACC,GAAD,OACrBC,YAAW,WACTJ,EAAS,CACPjB,KAAMoB,EACNL,SAAS,MAEV,UAEJ,CAACtB,IAEGuB,EDd2BM,CAAa7B,GAAjCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,wCAAd,SAAuDlB,IAEtDsB,GAAW,mBAAGJ,UAAU,wCAAb,uBACZ,qBAAKA,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GACX,OAAO,wBAAC,EAAD,2BAAkBA,GAAlB,IAAuBoB,IAAKpB,EAAIC,eEXpCoB,EAAe,WAC1B,MAAoC9C,mBAAS,CAAC,cAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAEA,OACE,qCACE,6CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGGgD,EAAWvB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAASA,SAAUA,GAAeA,UCH7BiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCEdO,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK1DX,M","file":"static/js/main.6137fa3f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((val) => [inputValue, ...val]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        value={inputValue}\r\n        placeholder=\"Escribe algo. ej: Kenichi\"\r\n        onChange={handleInputChange}\r\n        type=\"text\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=kpRS61cW2awYzq2Ik1yX71uOh0H3Xwlh`;\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n\r\nexport default getGifs;\r\n","import React from \"react\";\r\n\r\nexport const GiftGridItem = ({ id, title, url }) => {\r\n  console.log();\r\n  return (\r\n    <div className=\"card animate__animated animate__bounceIn\">\r\n      <img alt={title} src={url} />\r\n      <p> {title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nimport { GiftGridItem } from \"./GiftGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__backInLeft\">{category}</h3>\r\n\r\n      {loading && <p className=\"animate__animated animate__backInLeft\">Loading..</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => {\r\n          return <GiftGridItem {...img} key={img.id} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport getGifs from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) =>\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 3000)\r\n    );\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>Gifs Finder</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      \r\n        {categories.map((category) => (\r\n          <GifGrid category={category} key={category} />\r\n        ))}\r\n     \r\n    </>\r\n  );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\nimport \"animate.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}